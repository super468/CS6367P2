package edu.utd;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;


class MethodTransformVisitor extends MethodVisitor implements Opcodes {
    private String className;
    private int line;
    Type[] paramTypes;
    public int argLen;
    /**
     * Since we only care the className not the methodName in this project.
     * so we input the className
     * @param mv
     * @param className
     */
    public MethodTransformVisitor(final MethodVisitor mv, String className, Type[] paramTypes, int argLen) {
        super(ASM5, mv);
        this.className = className;
        this.paramTypes = paramTypes;
        this.argLen = argLen;
    }


//    @Override
//    public void visitLineNumber(int line, Label start) {
//        if (0 != line) {
//            this.line = line;
//            /**
//             * Generated by ASMfier
//             * Equals to edu.utd.CoverageCollection.visitLine("className, 1)
//             */
//            mv.visitLdcInsn(className);
//            mv.visitLdcInsn(new Integer(line));
//            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
//            mv.visitMethodInsn(INVOKESTATIC, "edu/utd/CoverageCollection", "visitLine", "(Ljava/lang/String;Ljava/lang/Integer;)V", false);
//            super.visitLineNumber(line, start);
//        }
//    }
//
//    @Override
//    public void visitLabel(Label arg0) {
//        mv.visitLdcInsn(className);
//        mv.visitLdcInsn(new Integer(this.line));
//        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
//        mv.visitMethodInsn(INVOKESTATIC, "edu/utd/CoverageCollection", "visitLine", "(Ljava/lang/String;Ljava/lang/Integer;)V", false);
//        super.visitLabel(arg0);
//    }

    @Override
    public void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index){
        super.visitLocalVariable(name,desc,signature,start,end,index);
        if("this".equals(name)) {
            return;
        }
        if(argLen-- > 0) {
            mv.visitVarInsn(ALOAD, 0);
            //argumentNames.add(name);
            DataTraceCollection.localName = name;
            Type tp = Type.getType(desc);
            DataTraceCollection.type = tp;
            if (tp.equals(Type.BOOLEAN_TYPE)) {
                mv.visitTypeInsn(NEW, "java/lang/Boolean");
                mv.visitInsn(DUP);
                mv.visitVarInsn(Opcodes.ILOAD, index);
                mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Boolean", "<init>", "(Z)V", false);
            }
            else if (tp.equals(Type.BYTE_TYPE)) {
                mv.visitTypeInsn(NEW, "java/lang/Byte");
                mv.visitInsn(DUP);
                mv.visitVarInsn(Opcodes.ILOAD, index);
                mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Byte", "<init>", "(B)V", false);
            }
            else if (tp.equals(Type.CHAR_TYPE)) {
                mv.visitTypeInsn(NEW, "java/lang/Character");
                mv.visitInsn(DUP);
                mv.visitVarInsn(Opcodes.ILOAD, index);
                mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Character", "<init>", "(C)V", false);
            }
            else if (tp.equals(Type.SHORT_TYPE)) {
                mv.visitTypeInsn(NEW, "java/lang/Short");
                mv.visitInsn(DUP);
                mv.visitVarInsn(Opcodes.ILOAD, index);
                mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Short", "<init>", "(S)V", false);
            }
            else if (tp.equals(Type.INT_TYPE)) {
                mv.visitTypeInsn(NEW, "java/lang/Integer");
                mv.visitInsn(DUP);
                mv.visitVarInsn(Opcodes.ILOAD, index);
                mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Integer", "<init>", "(I)V", false);
            }
            else if (tp.equals(Type.LONG_TYPE)) {
                mv.visitTypeInsn(NEW, "java/lang/Long");
                mv.visitInsn(DUP);
                mv.visitVarInsn(Opcodes.LLOAD, index);
                mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Long", "<init>", "(J)V", false);
            }
            else if (tp.equals(Type.FLOAT_TYPE)) {
                mv.visitTypeInsn(NEW, "java/lang/Float");
                mv.visitInsn(DUP);
                mv.visitVarInsn(Opcodes.FLOAD, index);
                mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Float", "<init>", "(F)V", false);
            }
            else if (tp.equals(Type.DOUBLE_TYPE)) {
                mv.visitTypeInsn(NEW, "java/lang/Double");
                mv.visitInsn(DUP);
                mv.visitVarInsn(Opcodes.DLOAD, index);
                mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Double", "<init>", "(D)V", false);
                //mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Double", "valueOf", "(D)Ljava/lang/Double;", false);
            }
            else
                mv.visitVarInsn(Opcodes.ALOAD, index);
            mv.visitMethodInsn(INVOKESTATIC, "edu/utd/DataTraceCollection", "addVariableValue", "(Ljava/lang/Object;)V", false);
            mv.visitMethodInsn(INVOKESTATIC, "edu/utd/DataTraceCollection", "test", "()V", false);
            System.out.println("The type descriptor of this local variable." + desc);
            System.out.println("The local variable's index." + index);
            System.out.println("The name of a local variable." + name);
            System.out.println("The signature of this local variable." + signature);
        }
    }

    @Override
    public void visitEnd() {
        super.visitEnd();
    }
}
